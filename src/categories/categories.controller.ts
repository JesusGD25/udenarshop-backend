import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  ParseUUIDPipe,
} from '@nestjs/common';
import { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { CategoriesService } from './categories.service';
import { CreateCategoryDto } from './dto/create-category.dto';
import { UpdateCategoryDto } from './dto/update-category.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
import { Public } from '../auth/decorators/public.decorator';
import { Roles } from '../auth/decorators/roles.decorator';
import { Role } from '../users/enums/role.enum';

/**
 * Controlador de categor√≠as
 * 
 * Protecci√≥n de rutas:
 * - GET /categories: P√∫blica (ver todas las categor√≠as)
 * - GET /categories/active: P√∫blica (ver categor√≠as activas)
 * - GET /categories/:term: P√∫blica (buscar por ID o slug)
 * - GET /categories/:term/products: P√∫blica (productos de una categor√≠a)
 * - GET /categories/:id/count: P√∫blica (contar productos)
 * - POST /categories: Solo ADMIN
 * - PATCH /categories/:id: Solo ADMIN
 * - PATCH /categories/:id/activate: Solo ADMIN
 * - DELETE /categories/:id: Solo ADMIN
 */
@ApiTags('Categor√≠as')
@Controller('categories')
export class CategoriesController {
  constructor(private readonly categoriesService: CategoriesService) {}

  /**
   * Crear nueva categor√≠a
   * Solo administradores
   */
  @Post()
  @Roles(Role.ADMIN)
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: '‚ûï Crear nueva categor√≠a',
    description:
      '**Solo Administradores**\n\n' +
      'Crea una nueva categor√≠a en el sistema.\n' +
      'El slug se genera autom√°ticamente a partir del nombre.\n\n' +
      '**Campos requeridos:** name, description',
  })
  @ApiResponse({
    status: 201,
    description: '‚úÖ Categor√≠a creada exitosamente',
    schema: {
      example: {
        id: 'uuid-123',
        name: 'Electr√≥nicos',
        slug: 'electronicos',
        description: 'Dispositivos electr√≥nicos y accesorios',
        isActive: true,
        createdAt: '2024-01-15T10:30:00.000Z',
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: '‚ö†Ô∏è Datos inv√°lidos o categor√≠a duplicada',
  })
  @ApiResponse({
    status: 401,
    description: '‚ùå No autenticado',
  })
  @ApiResponse({
    status: 403,
    description: 'üö´ Solo administradores pueden crear categor√≠as',
  })
  create(@Body() createCategoryDto: CreateCategoryDto) {
    return this.categoriesService.create(createCategoryDto);
  }

  /**
   * Obtener todas las categor√≠as
   * Ruta p√∫blica
   */
  @Public()
  @Get()
  @ApiOperation({
    summary: 'üìÅ Listar todas las categor√≠as',
    description:
      '**Ruta p√∫blica**\n\n' +
      'Retorna todas las categor√≠as del sistema (activas e inactivas).\n' +
      'Soporta paginaci√≥n con limit y offset.\n\n' +
      '√ötil para administradores que necesitan ver categor√≠as desactivadas.',
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Lista de categor√≠as obtenida',
    schema: {
      example: [
        {
          id: 'uuid-123',
          name: 'Electr√≥nicos',
          slug: 'electronicos',
          description: 'Dispositivos electr√≥nicos y accesorios',
          isActive: true,
        },
        {
          id: 'uuid-456',
          name: 'Ropa',
          slug: 'ropa',
          description: 'Prendas de vestir',
          isActive: false,
        },
      ],
    },
  })
  findAll(@Query() paginationDto: PaginationDto) {
    return this.categoriesService.findAll(paginationDto);
  }

  /**
   * Obtener solo categor√≠as activas
   * Ruta p√∫blica
   */
  @Public()
  @Get('active')
  @ApiOperation({
    summary: 'Listar categor√≠as activas',
    description:
      '**Ruta p√∫blica**\n\n' +
      'Retorna solo las categor√≠as activas (isActive = true).\n' +
      'Ideal para mostrar en el frontend a usuarios finales.\n\n' +
      'Excluye categor√≠as desactivadas por administradores.',
  })
  @ApiResponse({
    status: 200,
    description: 'Categor√≠as activas obtenidas',
  })
  findAllActive(@Query() paginationDto: PaginationDto) {
    return this.categoriesService.findAllActive(paginationDto);
  }

  /**
   * Buscar categor√≠a por ID o slug
   * Ruta p√∫blica
   */
  @Public()
  @Get(':term')
  @ApiOperation({
    summary: 'Buscar categor√≠a por ID o slug',
    description:
      '**Ruta p√∫blica**\n\n' +
      'Permite buscar una categor√≠a usando:\n' +
      '- **UUID**: ID √∫nico de la categor√≠a\n' +
      '- **Slug**: Nombre amigable para URLs (ej: "electronicos")\n\n' +
      'El sistema detecta autom√°ticamente el tipo de t√©rmino.',
  })
  @ApiResponse({
    status: 200,
    description: 'Categor√≠a encontrada',
  })
  @ApiResponse({
    status: 404,
    description: 'Categor√≠a no encontrada',
  })
  findOne(@Param('term') term: string) {
    return this.categoriesService.findOne(term);
  }

  /**
   * Obtener productos de una categor√≠a
   * Ruta p√∫blica
   */
  @Public()
  @Get(':term/products')
  @ApiOperation({
    summary: 'Obtener productos de una categor√≠a',
    description:
      '**Ruta p√∫blica**\n\n' +
      'Retorna todos los productos asociados a una categor√≠a espec√≠fica.\n' +
      'Puedes usar el ID o slug de la categor√≠a.\n\n' +
      'Incluye relaciones completas con el vendedor y la categor√≠a.',
  })
  @ApiResponse({
    status: 200,
    description: 'Productos de la categor√≠a obtenidos',
  })
  @ApiResponse({
    status: 404,
    description: 'Categor√≠a no encontrada',
  })
  findOneWithProducts(@Param('term') term: string) {
    return this.categoriesService.findOneWithProducts(term);
  }

  /**
   * Contar productos de una categor√≠a
   * Ruta p√∫blica
   */
  @Public()
  @Get(':id/count')
  @ApiOperation({
    summary: 'Contar productos en una categor√≠a',
    description:
      '**Ruta p√∫blica**\n\n' +
      'Retorna el n√∫mero total de productos asociados a la categor√≠a.\n' +
      '√ötil para mostrar estad√≠sticas sin cargar todos los productos.',
  })
  @ApiResponse({
    status: 200,
    description: 'Conteo obtenido',
    schema: {
      example: {
        categoryId: 'uuid-123',
        categoryName: 'Electr√≥nicos',
        productCount: 42,
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: 'Categor√≠a no encontrada',
  })
  countProducts(@Param('id', ParseUUIDPipe) id: string) {
    return this.categoriesService.countProducts(id);
  }

  /**
   * Actualizar categor√≠a existente
   * Solo administradores
   */
  @Patch(':id')
  @Roles(Role.ADMIN)
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Actualizar categor√≠a',
    description:
      '**Solo Administradores**\n\n' +
      'Permite editar informaci√≥n de una categor√≠a existente.\n' +
      'Todos los campos son opcionales.\n\n' +
      'Si cambias el nombre, el slug se regenera autom√°ticamente.',
  })
  @ApiResponse({
    status: 200,
    description: 'Categor√≠a actualizada exitosamente',
  })
  @ApiResponse({
    status: 400,
    description: 'Datos inv√°lidos',
  })
  @ApiResponse({
    status: 401,
    description: 'No autenticado',
  })
  @ApiResponse({
    status: 403,
    description: 'Solo administradores pueden editar categor√≠as',
  })
  @ApiResponse({
    status: 404,
    description: 'Categor√≠a no encontrada',
  })
  update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() updateCategoryDto: UpdateCategoryDto,
  ) {
    return this.categoriesService.update(id, updateCategoryDto);
  }

  /**
   * Activar una categor√≠a desactivada
   * Solo administradores
   */
  @Patch(':id/activate')
  @Roles(Role.ADMIN)
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Activar categor√≠a',
    description:
      '**Solo Administradores**\n\n' +
      'Reactiva una categor√≠a previamente desactivada.\n' +
      'Cambia isActive de false a true.\n\n' +
      '√ötil para restaurar categor√≠as temporalmente deshabilitadas.',
  })
  @ApiResponse({
    status: 200,
    description: 'Categor√≠a activada exitosamente',
  })
  @ApiResponse({
    status: 401,
    description: 'No autenticado',
  })
  @ApiResponse({
    status: 403,
    description: 'Solo administradores pueden activar categor√≠as',
  })
  @ApiResponse({
    status: 404,
    description: 'Categor√≠a no encontrada',
  })
  activate(@Param('id', ParseUUIDPipe) id: string) {
    return this.categoriesService.activate(id);
  }

  /**
   * Eliminar (desactivar) categor√≠a
   * Solo administradores
   */
  @Delete(':id')
  @Roles(Role.ADMIN)
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Eliminar categor√≠a',
    description:
      '**Solo Administradores**\n\n' +
      'Desactiva una categor√≠a (soft delete).\n' +
      'La categor√≠a no se elimina f√≠sicamente, solo se marca como inactiva.\n\n' +
      '**NOTA:** Los productos asociados permanecen en el sistema.',
  })
  @ApiResponse({
    status: 200,
    description: 'Categor√≠a desactivada exitosamente',
  })
  @ApiResponse({
    status: 401,
    description: 'No autenticado',
  })
  @ApiResponse({
    status: 403,
    description: 'Solo administradores pueden eliminar categor√≠as',
  })
  @ApiResponse({
    status: 404,
    description: 'Categor√≠a no encontrada',
  })
  remove(@Param('id', ParseUUIDPipe) id: string) {
    return this.categoriesService.remove(id);
  }
}
