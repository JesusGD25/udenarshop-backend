import { Injectable, Logger } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class AiService {
  private readonly logger = new Logger('AiService');
  private genAI: GoogleGenerativeAI;
  private model;

  constructor(private configService: ConfigService) {
    // Obtener la API key de las variables de entorno
    // Intentar primero con ConfigService, luego con process.env como fallback
    let apiKey = this.configService.get<string>('GEMINI_API_KEY');
    
    if (!apiKey) {
      // Fallback a process.env directamente
      apiKey = process.env.GEMINI_API_KEY;
      if (apiKey) {
        this.logger.warn('‚ö†Ô∏è API Key encontrada en process.env (no en ConfigService)');
      }
    }
    
    this.logger.log(`üîç Verificando API Key: ${apiKey ? 'Encontrada (longitud: ' + apiKey.length + ')' : 'NO encontrada'}`);
    
    if (!apiKey) {
      this.logger.error('‚ùå GEMINI_API_KEY no est√° configurada. El servicio de IA no funcionar√°.');
      this.logger.error('üìã Variables de entorno disponibles:', Object.keys(process.env));
    } else {
      try {
        this.genAI = new GoogleGenerativeAI(apiKey);
        // Usar gemini-2.5-flash - Modelo m√°s reciente, r√°pido y gratuito
        this.model = this.genAI.getGenerativeModel({ 
          model: 'gemini-2.5-flash'
        });
        this.logger.log('‚úÖ Servicio de IA inicializado correctamente con Gemini 2.5 Flash');
      } catch (error) {
        this.logger.error('‚ùå Error al inicializar Gemini:', error.message);
      }
    }
  }

  /**
   * Genera una descripci√≥n mejorada para un producto
   */
  async generateProductDescription(data: {
    title: string;
    currentDescription?: string;
    categoryName?: string;
    price?: number;
    images?: string[];
  }): Promise<string> {
    if (!this.model) {
      throw new Error('Servicio de IA no est√° disponible. Configura GEMINI_API_KEY en .env');
    }

    try {
      const { title, currentDescription, categoryName, price, images } = data;

      // Construir el prompt base
      let promptText = `Eres un asistente especializado en crear descripciones de productos para un marketplace universitario llamado "UdenarShop".

${images && images.length > 0 ? 'Analiza las im√°genes del producto proporcionadas.' : ''}

INFORMACI√ìN DEL PRODUCTO:
- T√≠tulo: ${title}
${categoryName ? `- Categor√≠a: ${categoryName}` : ''}
${price ? `- Precio: $${price.toLocaleString('es-CO')} COP` : ''}
${currentDescription ? `- Info adicional: ${currentDescription}` : ''}

INSTRUCCIONES IMPORTANTES:
1. Genera √öNICAMENTE la descripci√≥n del producto, sin introducciones, saludos ni texto adicional
2. NO incluyas frases como "Aqu√≠ tienes...", "¬°Absolutamente!", "---", ni t√≠tulos adicionales
3. Comienza directamente con la descripci√≥n del producto
4. ${images && images.length > 0 ? 'Describe lo que ves en las im√°genes: estado f√≠sico, color, caracter√≠sticas visibles, accesorios incluidos' : 'Basa la descripci√≥n en el t√≠tulo y categor√≠a proporcionados'}
5. M√°ximo 200 palabras, tono amigable pero profesional
6. Incluye 2-3 emojis relevantes al producto
7. Enf√≥cate en lo atractivo para estudiantes universitarios
8. NO inventes caracter√≠sticas que no puedas confirmar

GENERA LA DESCRIPCI√ìN:`;

      // Si hay im√°genes, crear un contenido multimodal
      let content;
      if (images && images.length > 0) {
        this.logger.log(`üñºÔ∏è Analizando ${images.length} imagen(es) del producto "${title}"`);
        
        // Limitar a las primeras 3 im√°genes para no sobrecargar la API
        const imagesToAnalyze = images.slice(0, 3);
        
        // Crear partes del contenido: texto + im√°genes
        const parts: any[] = [
          { text: promptText }
        ];

        // A√±adir cada imagen como parte del contenido
        for (const imageUrl of imagesToAnalyze) {
          try {
            // Descargar la imagen y convertirla a base64
            const response = await fetch(imageUrl);
            const arrayBuffer = await response.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);
            const base64Image = buffer.toString('base64');
            
            // Detectar el tipo MIME de la imagen
            const mimeType = response.headers.get('content-type') || 'image/jpeg';
            
            parts.push({
              inlineData: {
                mimeType,
                data: base64Image
              }
            });
          } catch (imgError) {
            this.logger.warn(`‚ö†Ô∏è No se pudo cargar imagen: ${imageUrl}`, imgError.message);
          }
        }

        content = parts;
      } else {
        // Si no hay im√°genes, usar solo texto
        content = promptText;
      }

      const result = await this.model.generateContent(content);
      const response = await result.response;
      let generatedText = response.text();

      // Limpiar texto no deseado
      generatedText = this.cleanGeneratedText(generatedText);

      this.logger.log(`‚úÖ Descripci√≥n generada para: "${title}" ${images && images.length > 0 ? `(con ${images.length} im√°genes)` : ''}`);
      return generatedText.trim();

    } catch (error) {
      this.logger.error('‚ùå Error al generar descripci√≥n con IA:');
      this.logger.error('Tipo de error:', error.constructor.name);
      this.logger.error('Mensaje:', error.message);
      this.logger.error('Stack:', error.stack);
      if (error.response) {
        this.logger.error('Respuesta de API:', JSON.stringify(error.response, null, 2));
      }
      
      // Si falla, retornar una descripci√≥n b√°sica
      if (data.currentDescription) {
        return data.currentDescription;
      }
      
      throw new Error(`No se pudo generar la descripci√≥n: ${error.message}`);
    }
  }

  /**
   * Genera un t√≠tulo optimizado para SEO
   */
  async generateProductTitle(currentTitle: string, categoryName?: string): Promise<string> {
    if (!this.model) {
      throw new Error('Servicio de IA no est√° disponible. Configura GEMINI_API_KEY en .env');
    }

    try {
      const prompt = `Mejora este t√≠tulo de producto para un marketplace:

**T√≠tulo actual:** ${currentTitle}
${categoryName ? `**Categor√≠a:** ${categoryName}` : ''}

**Instrucciones:**
1. Hazlo m√°s claro, atractivo y descriptivo
2. M√°ximo 100 caracteres
3. Incluye palabras clave relevantes
4. Mant√©n la informaci√≥n esencial
5. NO agregues emojis
6. Retorna SOLO el t√≠tulo mejorado, sin explicaciones

**T√≠tulo mejorado:**`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const generatedText = response.text();

      this.logger.log(`‚úÖ T√≠tulo optimizado generado`);
      return generatedText.trim();

    } catch (error) {
      this.logger.error('‚ùå Error al generar t√≠tulo con IA:', error);
      return currentTitle;
    }
  }

  /**
   * Verifica si el servicio de IA est√° disponible
   */
  isAvailable(): boolean {
    return !!this.model;
  }

  /**
   * Limpia el texto generado removiendo introducciones y formato no deseado
   */
  private cleanGeneratedText(text: string): string {
    // Eliminar l√≠neas de introducci√≥n comunes
    const unwantedPhrases = [
      /^¬°?Absolutamente!?\s*/i,
      /^Claro!?\s*/i,
      /^Por supuesto!?\s*/i,
      /^Aqu√≠ tienes.*?:\s*/i,
      /^Aqu√≠ est√°.*?:\s*/i,
      /^Esta es.*?:\s*/i,
      /^Te presento.*?:\s*/i,
      /^---+\s*/g,  // L√≠neas separadoras
      /^\*\*T√≠tulo:?\*\*.*$/gm,  // L√≠neas de t√≠tulo
      /^\*\*Descripci√≥n.*?:?\*\*\s*/gm,  // Encabezados de descripci√≥n
    ];

    let cleanedText = text;

    // Aplicar todas las expresiones regulares
    unwantedPhrases.forEach(pattern => {
      cleanedText = cleanedText.replace(pattern, '');
    });

    // Eliminar l√≠neas vac√≠as al inicio
    cleanedText = cleanedText.replace(/^\s*\n+/, '');

    // Eliminar m√∫ltiples saltos de l√≠nea consecutivos
    cleanedText = cleanedText.replace(/\n{3,}/g, '\n\n');

    return cleanedText.trim();
  }

  /**
   * Genera t√©rminos de b√∫squeda relacionados y sin√≥nimos
   */
  async generateSearchTerms(query: string): Promise<string[]> {
    if (!this.model) {
      // Si no hay IA disponible, solo retornar el query original
      return [query];
    }

    try {
      const prompt = `Eres un asistente experto en b√∫squeda de productos en un marketplace universitario.

T√âRMINO DE B√öSQUEDA: "${query}"

INSTRUCCIONES:
1. Genera una lista de t√©rminos relacionados, sin√≥nimos y variaciones que alguien podr√≠a usar para buscar el mismo tipo de producto
2. Incluye t√©rminos en espa√±ol e ingl√©s si son comunes
3. Piensa en marcas populares que correspondan a ese tipo de producto
4. M√°ximo 10 t√©rminos
5. Retorna SOLO los t√©rminos separados por comas, sin numeraci√≥n ni explicaciones
6. Si el t√©rmino es una marca espec√≠fica (como "iPhone"), incluye el t√©rmino gen√©rico ("tel√©fono", "smartphone")
7. Si es un t√©rmino gen√©rico, incluye marcas populares de ese producto

EJEMPLO:
B√∫squeda: "auriculares"
Respuesta: auriculares,aud√≠fonos,cascos,headphones,earphones,AirPods,audifonos bluetooth,auriculares inalambricos

Ahora genera los t√©rminos para: "${query}"

T√âRMINOS:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const generatedText = response.text().trim();

      // Parsear los t√©rminos (separados por comas)
      const terms = generatedText
        .split(',')
        .map(term => term.trim().toLowerCase())
        .filter(term => term.length > 0 && term.length < 100)
        .slice(0, 10); // Limitar a 10 t√©rminos

      // Siempre incluir el t√©rmino original
      if (!terms.includes(query.toLowerCase())) {
        terms.unshift(query.toLowerCase());
      }

      this.logger.log(`‚úÖ T√©rminos de b√∫squeda generados para "${query}": ${terms.join(', ')}`);
      return terms;

    } catch (error) {
      this.logger.error('‚ùå Error al generar t√©rminos de b√∫squeda con IA:', error.message);
      // En caso de error, retornar solo el query original
      return [query];
    }
  }
}
